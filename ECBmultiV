{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNhvraMT5fX8loBVGK0Dqr1",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/DPK-VT/MLTESTS/blob/main/ECBmultiV\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0T8APOxGqpGn"
      },
      "outputs": [],
      "source": [
        "\n",
        "# used NuzhatTanzina's Currency-Rate-Forecasting thesis.ipynb\n",
        "#from github as basis for the code\n",
        "import pandas as pd\n",
        "from pandas import to_datetime\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_excel('ECB_exchange_rates_march31.xlsx')\n",
        "\n",
        "# Rename relevant columns for easier access\n",
        "df = df.rename(columns={\n",
        "    'USD': 'EUR/USD',\n",
        "    'JPY': 'EUR/JPY',\n",
        "    'GBP': 'EUR/GBP',\n",
        "    'CHF': 'EUR/CHF',\n",
        "    'AUD': 'EUR/AUD'\n",
        "})\n",
        "\n",
        "# Set 'Date' as the index and sort\n",
        "df = df.set_index('Date')\n",
        "df = df.sort_index()\n",
        "\n",
        "# Infer the frequency\n",
        "df = df.asfreq('B')\n",
        "\n",
        "# Define the currencies to analyze\n",
        "currencies = ['EUR/USD', 'EUR/JPY', 'EUR/GBP', 'EUR/CHF', 'EUR/AUD']\n",
        "\n",
        "# Loop through each currency\n",
        "for currency in currencies:\n",
        "    print(f\"\\nProcessing {currency} data\")\n",
        "\n",
        "    # Prepare the data for the selected currency pair\n",
        "    exchange_data_currency = df[[currency]].copy()\n",
        "    exchange_data_currency = exchange_data_currency.rename(columns={currency: 'close'})\n",
        "    exchange_data_currency = exchange_data_currency.dropna()\n",
        "\n",
        "    # Splitting the dataset into train and test\n",
        "    train_size = int(len(exchange_data_currency) * 0.8)\n",
        "    train, test = exchange_data_currency.iloc[:train_size], exchange_data_currency.iloc[train_size:]\n",
        "\n",
        "    # ARIMA Model parameters\n",
        "    p, d, q = 1, 0, 1\n",
        "\n",
        "    # ARIMA Model Training\n",
        "    arima_model = ARIMA(train['close'], order=(p, d, q))\n",
        "    arima_model_fit = arima_model.fit()\n",
        "\n",
        "    # Random Forest Model Preparation\n",
        "    # Creating lag features for Random Forest\n",
        "    train_rf = train.copy()\n",
        "    for lag in range(1, 4):  # Using 3 lags as an example\n",
        "        train_rf[f'lag_{lag}'] = train_rf['close'].shift(lag)\n",
        "\n",
        "    # Dropping missing values created by lag features\n",
        "    train_rf.dropna(inplace=True)\n",
        "\n",
        "    # Feature and target separation\n",
        "    X = train_rf[['lag_1', 'lag_2', 'lag_3']]\n",
        "    y = train_rf['close']\n",
        "\n",
        "    # Train/Test Split for Random Forest\n",
        "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "    # Random Forest Model Training\n",
        "    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "    rf_model.fit(X_train, y_train)\n",
        "\n",
        "    # Preparing Test Data for Random Forest Predictions\n",
        "    test_rf = test.copy()\n",
        "    for lag in range(1, 4):\n",
        "        test_rf[f'lag_{lag}'] = test_rf['close'].shift(lag)\n",
        "    test_rf.dropna(inplace=True)\n",
        "\n",
        "    # ARIMA Predictions\n",
        "    arima_predictions = arima_model_fit.forecast(steps=len(test_rf))\n",
        "\n",
        "    # Random Forest Predictions\n",
        "    rf_predictions = rf_model.predict(test_rf[['lag_1', 'lag_2', 'lag_3']])\n",
        "\n",
        "    # Hybrid Model: Average of ARIMA and Random Forest predictions\n",
        "    hybrid_predictions = np.mean(np.column_stack((arima_predictions, rf_predictions)), axis=1)\n",
        "\n",
        "    # Evaluation Metrics\n",
        "    rmse = np.sqrt(mean_squared_error(test_rf['close'], hybrid_predictions))  # Calculate RMSE using NumPy's sqrt function\n",
        "    mae = mean_absolute_error(test_rf['close'], hybrid_predictions)\n",
        "    mape = mean_absolute_percentage_error(test_rf['close'], hybrid_predictions)\n",
        "\n",
        "    print(f\"Results for {currency}:\")\n",
        "    print(\"RMSE:\", rmse)\n",
        "    print(\"MAE:\", mae)\n",
        "    print(\"MAPE:\", mape)"
      ]
    }
  ]
}